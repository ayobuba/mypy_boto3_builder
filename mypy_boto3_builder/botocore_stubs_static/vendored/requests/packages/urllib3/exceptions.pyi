from typing import Any, Type

class HTTPError(Exception): ...
class HTTPWarning(Warning): ...

class PoolError(HTTPError):
    def __init__(self, pool: Any, message: str) -> None:
        self.pool: Any
    def __reduce__(self): ...

class RequestError(PoolError):
    def __init__(self, pool: Any, url: str, message: str) -> None:
        self.url: str
    def __reduce__(self): ...

class SSLError(HTTPError): ...
class ProxyError(HTTPError): ...
class DecodeError(HTTPError): ...
class ProtocolError(HTTPError): ...

ConnectionError: Type[ProtocolError]

class MaxRetryError(RequestError):
    def __init__(self, pool: Any, url: str, reason: Exception = ...) -> None:
        self.reason: Exception

class HostChangedError(RequestError):
    def __init__(self, pool: Any, url: str, retries: int = ...) -> None:
        self.retries: int

class TimeoutStateError(HTTPError): ...
class TimeoutError(HTTPError): ...
class ReadTimeoutError(TimeoutError, RequestError): ...
class ConnectTimeoutError(TimeoutError): ...
class EmptyPoolError(PoolError): ...
class ClosedPoolError(PoolError): ...
class LocationValueError(ValueError, HTTPError): ...

class LocationParseError(LocationValueError):
    location: str
    def __init__(self, location: str) -> None: ...

class ResponseError(HTTPError):
    GENERIC_ERROR: str
    SPECIFIC_ERROR: str

class SecurityWarning(HTTPWarning): ...
class InsecureRequestWarning(SecurityWarning): ...
class SystemTimeWarning(SecurityWarning): ...
class InsecurePlatformWarning(SecurityWarning): ...
